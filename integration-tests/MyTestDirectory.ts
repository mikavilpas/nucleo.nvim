// Note: This file is autogenerated. Do not edit it directly.
//
// Describes the contents of the test directory, which is a blueprint for
// files and directories. Tests can create a unique, safe environment for
// interacting with the contents of such a directory.
//
// Having strong typing for the test directory contents ensures that tests can
// be written with confidence that the files and directories they expect are
// actually found. Otherwise the tests are brittle and can break easily.

import { z } from "zod"

export const MyTestDirectorySchema = z.object({
  name: z.literal("test-environment/"),
  type: z.literal("directory"),
  contents: z.object({
    ".config": z.object({
      name: z.literal(".config/"),
      type: z.literal("directory"),
      contents: z.object({
        nvim: z.object({
          name: z.literal("nvim/"),
          type: z.literal("directory"),
          contents: z.object({
            "init.lua": z.object({
              name: z.literal("init.lua"),
              type: z.literal("file"),
              extension: z.literal("lua"),
              stem: z.literal("init."),
            }),
          }),
        }),
        yazi: z.object({
          name: z.literal("yazi/"),
          type: z.literal("directory"),
          contents: z.object({}),
        }),
      }),
    }),
    "config-modifications": z.object({
      name: z.literal("config-modifications/"),
      type: z.literal("directory"),
      contents: z.object({
        ".gitkeep": z.object({
          name: z.literal(".gitkeep"),
          type: z.literal("file"),
          extension: z.literal(""),
          stem: z.literal(".gitkeep"),
        }),
      }),
    }),
    "dir with spaces": z.object({
      name: z.literal("dir with spaces/"),
      type: z.literal("directory"),
      contents: z.object({
        "file1.txt": z.object({
          name: z.literal("file1.txt"),
          type: z.literal("file"),
          extension: z.literal("txt"),
          stem: z.literal("file1."),
        }),
        "file2.txt": z.object({
          name: z.literal("file2.txt"),
          type: z.literal("file"),
          extension: z.literal("txt"),
          stem: z.literal("file2."),
        }),
      }),
    }),
    "file2.txt": z.object({
      name: z.literal("file2.txt"),
      type: z.literal("file"),
      extension: z.literal("txt"),
      stem: z.literal("file2."),
    }),
    "file3.txt": z.object({
      name: z.literal("file3.txt"),
      type: z.literal("file"),
      extension: z.literal("txt"),
      stem: z.literal("file3."),
    }),
    highlights: z.object({
      name: z.literal("highlights/"),
      type: z.literal("directory"),
      contents: z.object({
        "file_1.txt": z.object({
          name: z.literal("file_1.txt"),
          type: z.literal("file"),
          extension: z.literal("txt"),
          stem: z.literal("file_1."),
        }),
        "file_2.txt": z.object({
          name: z.literal("file_2.txt"),
          type: z.literal("file"),
          extension: z.literal("txt"),
          stem: z.literal("file_2."),
        }),
        "file_3.txt": z.object({
          name: z.literal("file_3.txt"),
          type: z.literal("file"),
          extension: z.literal("txt"),
          stem: z.literal("file_3."),
        }),
      }),
    }),
    "initial-file.txt": z.object({
      name: z.literal("initial-file.txt"),
      type: z.literal("file"),
      extension: z.literal("txt"),
      stem: z.literal("initial-file."),
    }),
    "luafile.lua": z.object({
      name: z.literal("luafile.lua"),
      type: z.literal("file"),
      extension: z.literal("lua"),
      stem: z.literal("luafile."),
    }),
    "other-subdirectory": z.object({
      name: z.literal("other-subdirectory/"),
      type: z.literal("directory"),
      contents: z.object({
        "other-sub-file.txt": z.object({
          name: z.literal("other-sub-file.txt"),
          type: z.literal("file"),
          extension: z.literal("txt"),
          stem: z.literal("other-sub-file."),
        }),
      }),
    }),
    routes: z.object({
      name: z.literal("routes/"),
      type: z.literal("directory"),
      contents: z.object({
        "posts.$postId": z.object({
          name: z.literal("posts.$postId/"),
          type: z.literal("directory"),
          contents: z.object({}),
        }),
      }),
    }),
    subdirectory: z.object({
      name: z.literal("subdirectory/"),
      type: z.literal("directory"),
      contents: z.object({
        "subdirectory-file.txt": z.object({
          name: z.literal("subdirectory-file.txt"),
          type: z.literal("file"),
          extension: z.literal("txt"),
          stem: z.literal("subdirectory-file."),
        }),
      }),
    }),
  }),
})

export const MyTestDirectoryContentsSchema =
  MyTestDirectorySchema.shape.contents
export type MyTestDirectoryContentsSchemaType = z.infer<
  typeof MyTestDirectorySchema
>

export type MyTestDirectory = MyTestDirectoryContentsSchemaType["contents"]

export const testDirectoryFiles = z.enum([
  ".config/nvim/init.lua",
  ".config/nvim",
  ".config/yazi",
  ".config",
  "config-modifications/.gitkeep",
  "config-modifications",
  "dir with spaces/file1.txt",
  "dir with spaces/file2.txt",
  "dir with spaces",
  "file2.txt",
  "file3.txt",
  "highlights/file_1.txt",
  "highlights/file_2.txt",
  "highlights/file_3.txt",
  "highlights",
  "initial-file.txt",
  "luafile.lua",
  "other-subdirectory/other-sub-file.txt",
  "other-subdirectory",
  "routes/posts.$postId",
  "routes",
  "subdirectory/subdirectory-file.txt",
  "subdirectory",
  ".",
])
export type MyTestDirectoryFile = z.infer<typeof testDirectoryFiles>
